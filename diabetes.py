# -*- coding: utf-8 -*-
"""Diabetes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PGi4Th3fcmmGJIvveLHJngHPqQ-OJIIu

Importing the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Analysis

PIMA Diabetes Dataset
"""

#loading the diabetes dataset to a pandas DataFrame
diabetes_dataset = pd.read_csv('diabetes (1).csv')

#printing the first 5 rows of the dataset
diabetes_dataset.head()

# number of rows and columns in this dataset
diabetes_dataset.shape

# getting the statistical measures of the data
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

"""0 --> Non-Diabetic
1 --> Diabetic
"""

diabetes_dataset.groupby('Outcome').mean()

# separating the data and labels
X = diabetes_dataset.drop(columns='Outcome', axis=1) #axis=0 when dropping rows
Y = diabetes_dataset['Outcome']

print(X)
print(Y)

"""Data Standardization"""

# use standarscaler for this step
scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X) #or you can use fit_transform function

print(standardized_data)

X = standardized_data #represents the data
Y = diabetes_dataset['Outcome'] #represents the model

print(X)
print(Y)

"""Train Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Training the Model"""

classifier = svm.SVC(kernel='linear')

# training the SVM Classifier
classifier.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy score on the training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data: ', training_data_accuracy)

X_test_prediction = classifier.predict(X_test)
testing_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the test data: ', testing_data_accuracy)

"""Making a Predictive System"""

input_data = (1,	89,	66,	23,	94,	28.1,	0.167,	21)

#changing the input_data to numpy array
input_data_as_numpy_array = np.array(input_data)

#reshape the array as we are predicting for one instance
input_data_reshape = input_data_as_numpy_array.reshape(1, -1)

#standardize the input data
std_data = scaler.transform(input_data_reshape)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print ('The person is not Diabetic')
else :
  print ('The person is Diabetic')